import { createApi } from "@reduxjs/toolkit/query/react";
import authBaseQuery from "../../../../utils/authBaseQuery";

const IncentivePlanApi = createApi({
  reducerPath: "incentivePlanApi",
  baseQuery: authBaseQuery,
  endpoints: (builder) => ({
    // Fetch all incentive plans
    getIncentivePlanList: builder.query({
      query: () => "sales/incentive_plan",
      transformResponse: (response) => response.data,
      keepUnusedDataFor: 0, // Keep the data for 24 hours
    }),

    // Fetch details of a single incentive plan
    getIncentivePlanDetails: builder.query({
      query: (id) => `sales/incentive_plan/${id}`,
      transformResponse: (response) => response.data.data,
      keepUnusedDataFor: 0,
    }),

    getAdjustment: builder.query({
      query: (loginUserId) =>
        `sales/user_adjustment_incentive_amount/${loginUserId}`,
      transformResponse: (response) => response.data,
    }),

    // Add new incentive plan
    createIncentivePlan: builder.mutation({
      query: (newIncentivePlan) => ({
        url: "sales/incentive_plan",
        method: "POST",
        body: newIncentivePlan,
      }),
      onQueryStarted: async (
        newIncentivePlan,
        { dispatch, queryFulfilled }
      ) => {
        try {
          const { data: addedIncentivePlan } = await queryFulfilled;
          dispatch(
            IncentivePlanApi.util.updateQueryData(
              "getIncentivePlanList",
              undefined,
              (draft) => {
                draft.unshift(addedIncentivePlan);
              }
            )
          );
        } catch (error) {
          console.error("Failed to add incentive plan:", error);
        }
      },
    }),

    // Update existing incentive plan
    updateIncentivePlan: builder.mutation({
      query: ({ id, ...updatedIncentivePlan }) => ({
        url: `sales/incentive_plan/${id}`,
        method: "PUT",
        body: updatedIncentivePlan,
      }),
      onQueryStarted: async (
        { id, ...updatedIncentivePlan },
        { dispatch, queryFulfilled }
      ) => {
        try {
          const { data: returnedIncentivePlan } = await queryFulfilled;
          dispatch(
            IncentivePlanApi.util.updateQueryData(
              "getIncentivePlanList",
              undefined,
              (draft) => {
                const planIndex = draft.findIndex((plan) => plan._id === id);
                if (planIndex !== -1) {
                  draft[planIndex] = returnedIncentivePlan;
                }
              }
            )
          );
        } catch (error) {
          console.error("Failed to update incentive plan:", error);
        }
      },
    }),

    // Delete incentive plan
    deleteIncentivePlan: builder.mutation({
      query: (id) => ({
        url: `sales/incentive_plan/${id}`,
        method: "DELETE",
      }),
      onQueryStarted: async (id, { dispatch, queryFulfilled }) => {
        try {
          await queryFulfilled;
          dispatch(
            IncentivePlanApi.util.updateQueryData(
              "getIncentivePlanList",
              undefined,
              (draft) => {
                return draft.filter((plan) => plan.id !== id);
              }
            )
          );
        } catch (error) {
          console.error("Failed to delete incentive plan:", error);
        }
      },
    }),
  }),
});

// Export the hooks generated by createApi
export const {
  useGetIncentivePlanListQuery,
  useGetIncentivePlanDetailsQuery,
  useGetAdjustmentQuery,
  useCreateIncentivePlanMutation,
  useUpdateIncentivePlanMutation,
  useDeleteIncentivePlanMutation,
} = IncentivePlanApi;

export default IncentivePlanApi;
